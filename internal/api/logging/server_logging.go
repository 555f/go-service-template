// Code generated by GG version . DO NOT EDIT.

package logging

import (
	"context"
	middleware "github.com/555f/go-service-template/internal/api/middleware"
	controller "github.com/555f/go-service-template/internal/usecase/controller"
	dto "github.com/555f/go-service-template/pkg/domain/dto"
	"log/slog"
	"time"
)

type errLevel interface {
	Level() string
}
type logError interface {
	LogError() error
}

func levelLogger(e errLevel) slog.Level {
	switch e.Level() {
	default:
		return slog.LevelError
	case "debug":
		return slog.LevelDebug
	case "info":
		return slog.LevelInfo
	case "warn":
		return slog.LevelWarn
	}
}

type UserControllerLoggingMiddleware struct {
	next   controller.UserController
	logger *slog.Logger
}

func (s *UserControllerLoggingMiddleware) Search(ctx context.Context, name string) (users []*dto.User, err error) {
	defer func(now time.Time) {
		logger := s.logger.With("name", name)
		logLever := slog.LevelDebug
		if err != nil {
			logLever = slog.LevelError
			if e, ok := err.(errLevel); ok {
				logLever = levelLogger(e)
			}
			if e, ok := err.(logError); ok {
				logger = logger.With("err", e.LogError())
			} else {
				logger = logger.With("err", err)
			}
		}
		logger = logger.With("dur", time.Since(now).String())
		logger.Log(context.TODO(), logLever, "call method - Search")
	}(time.Now())
	users, err = s.next.Search(ctx, name)
	return
}
func LoggingUserControllerMiddleware(logger *slog.Logger) middleware.UserControllerMiddleware {
	return func(next controller.UserController) controller.UserController {
		return &UserControllerLoggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}
